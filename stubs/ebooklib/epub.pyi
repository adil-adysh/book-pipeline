from _typeshed import Incomplete
from ebooklib.utils import get_pages_for_items as get_pages_for_items, guess_type as guess_type, parse_html_string as parse_html_string, parse_string as parse_string

VERSION: Incomplete
NAMESPACES: Incomplete
CONTAINER_PATH: str
CONTAINER_XML: str
NCX_XML: Incomplete
NAV_XML: Incomplete
CHAPTER_XML: Incomplete
COVER_XML: Incomplete
IMAGE_MEDIA_TYPES: Incomplete

class Section:
    title: Incomplete
    href: Incomplete
    def __init__(self, title, href: str = '') -> None: ...

class Link:
    href: Incomplete
    title: Incomplete
    uid: Incomplete
    def __init__(self, href, title, uid: Incomplete | None = None) -> None: ...

class EpubException(Exception):
    code: Incomplete
    msg: Incomplete
    def __init__(self, code, msg) -> None: ...

class EpubItem:
    id: Incomplete
    file_name: Incomplete
    media_type: Incomplete
    content: Incomplete
    is_linear: bool
    manifest: Incomplete
    book: Incomplete
    def __init__(self, uid: Incomplete | None = None, file_name: str = '', media_type: str = '', content=..., manifest: bool = True) -> None: ...
    def get_id(self): ...
    def get_name(self): ...
    def get_type(self): ...
    def get_content(self, default=...): ...
    def set_content(self, content) -> None: ...

class EpubNcx(EpubItem):
    def __init__(self, uid: str = 'ncx', file_name: str = 'toc.ncx') -> None: ...

class EpubCover(EpubItem):
    def __init__(self, uid: str = 'cover-img', file_name: str = '') -> None: ...
    def get_type(self): ...

class EpubHtml(EpubItem):
    title: Incomplete
    lang: Incomplete
    direction: Incomplete
    media_overlay: Incomplete
    media_duration: Incomplete
    links: Incomplete
    properties: Incomplete
    pages: Incomplete
    def __init__(self, uid: Incomplete | None = None, file_name: str = '', media_type: str = '', content: Incomplete | None = None, title: str = '', lang: Incomplete | None = None, direction: Incomplete | None = None, media_overlay: Incomplete | None = None, media_duration: Incomplete | None = None) -> None: ...
    def is_chapter(self): ...
    def get_type(self): ...
    def set_language(self, lang) -> None: ...
    def get_language(self): ...
    def add_link(self, **kwgs) -> None: ...
    def get_links(self): ...
    def get_links_of_type(self, link_type): ...
    def add_item(self, item) -> None: ...
    def get_body_content(self): ...
    def get_content(self, default: Incomplete | None = None): ...

class EpubCoverHtml(EpubHtml):
    image_name: Incomplete
    is_linear: bool
    def __init__(self, uid: str = 'cover', file_name: str = 'cover.xhtml', image_name: str = '', title: str = 'Cover') -> None: ...
    def is_chapter(self): ...
    content: Incomplete
    def get_content(self): ...

class EpubNav(EpubHtml):
    def __init__(self, uid: str = 'nav', file_name: str = 'nav.xhtml', media_type: str = 'application/xhtml+xml', title: str = '') -> None: ...
    def is_chapter(self): ...

class EpubImage(EpubItem):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_type(self): ...

class EpubSMIL(EpubItem):
    def __init__(self, uid: Incomplete | None = None, file_name: str = '', content: Incomplete | None = None) -> None: ...
    def get_type(self): ...

class EpubBook:
    EPUB_VERSION: Incomplete
    def __init__(self) -> None: ...
    metadata: Incomplete
    items: Incomplete
    spine: Incomplete
    guide: Incomplete
    pages: Incomplete
    toc: Incomplete
    bindings: Incomplete
    IDENTIFIER_ID: str
    FOLDER_NAME: str
    title: str
    language: str
    direction: Incomplete
    templates: Incomplete
    prefixes: Incomplete
    namespaces: Incomplete
    def reset(self) -> None: ...
    uid: Incomplete
    def set_identifier(self, uid) -> None: ...
    def set_title(self, title) -> None: ...
    def set_language(self, lang) -> None: ...
    def set_direction(self, direction) -> None: ...
    def set_cover(self, file_name, content, create_page: bool = True) -> None: ...
    def add_author(self, author, file_as: Incomplete | None = None, role: Incomplete | None = None, uid: str = 'creator') -> None: ...
    def add_metadata(self, namespace, name, value, others: Incomplete | None = None) -> None: ...
    def get_metadata(self, namespace, name): ...
    def set_unique_metadata(self, namespace, name, value, others: Incomplete | None = None) -> None: ...
    def add_item(self, item): ...
    def get_item_with_id(self, uid): ...
    def get_item_with_href(self, href): ...
    def get_items(self): ...
    def get_items_of_type(self, item_type): ...
    def get_items_of_media_type(self, media_type): ...
    def set_template(self, name, value) -> None: ...
    def get_template(self, name): ...
    def add_prefix(self, name, uri) -> None: ...

class EpubWriter:
    DEFAULT_OPTIONS: Incomplete
    file_name: Incomplete
    book: Incomplete
    options: Incomplete
    def __init__(self, name, book, options: Incomplete | None = None) -> None: ...
    def process(self) -> None: ...
    out: Incomplete
    def write(self) -> None: ...

class EpubReader:
    DEFAULT_OPTIONS: Incomplete
    file_name: Incomplete
    book: Incomplete
    zf: Incomplete
    opf_file: str
    opf_dir: str
    options: Incomplete
    def __init__(self, epub_file_name, options: Incomplete | None = None) -> None: ...
    def process(self) -> None: ...
    def load(self): ...
    def read_file(self, name): ...

def write_epub(name, book, options: Incomplete | None = None) -> None: ...
def read_epub(name, options: Incomplete | None = None): ...
